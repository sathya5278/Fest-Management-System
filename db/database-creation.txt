Signup or Login:

CREATE TABLE APPUSER(
NAME CHAR(15) NOT NULL,
USN CHAR(10),
BRANCH CHAR(3) NOT NULL,
MOBILE NUMERIC(10) NOT NULL,
EMAIL CHAR(25),
USERNAME CHAR(10),
PASSWORD CHAR(8) NOT NULL,
SECQUES CHAR(10) NOT NULL,
PRIMARY KEY(USN,USERNAME)
);

INSERT INTO APPUSER VALUES('ERROR','1RN17CS161','CSE',8861034285,NULL,'error161','error161','error');




Event:

CREATE TABLE EVENTS(
EVENT_ID NUMERIC(2) PRIMARY KEY,
E_NAME CHAR(15) NOT NULL,
E_VENUE CHAR(10) NOT NULL,
E_DATE DATE NOT NULL,
E_TIME TIME NOT NULL
);




Sponsors:

CREATE TABLE SPONSORS(
S_ID NUMERIC(2) PRIMARY KEY,
S_NAME CHAR(10) NOT NULL,
AMOUNT NUMERIC(10) NOT NULL
);



Volunteers:

CREATE TABLE VOLUNTEERS(
V_USN CHAR(10),
V_NAME CHAR(15) NOT NULL,
V_MOBILE NUMERIC(10) NOT NULL,
V_EVENT_ID NUMERIC(2),
FOREIGN KEY(V_EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
PRIMARY KEY(V_USN,V_EVENT_ID)
);


PARTICIPANTS:


CREATE TABLE PARTICIPANTS(
P_USN CHAR(10),
P_NAME CHAR(15) NOT NULL,
P_MOBILE NUMERIC(10) NOT NULL,
BRANCH CHAR(4) NOT NULL,
P_EVENT_ID NUMERIC(2),
FOREIGN KEY(P_EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
PRIMARY KEY(P_USN,P_EVENT_ID)
);



FINANCE:

CREATE TABLE FINANCE(
F_EVENT_ID NUMERIC(2),
F_S_ID NUMERIC(2),
FOREIGN KEY(F_EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
FOREIGN KEY(F_S_ID) REFERENCES SPONSORS(S_ID) ON DELETE CASCADE,
BUDGET NUMERIC(10) NOT NULL,
ORG_COST NUMERIC(10) NOT NULL,
PRIMARY KEY(F_EVENT_ID,F_S_ID)
);



LOGISTICS:
CREATE TABLE LOGISTICS(
L_ID NUMERIC(2),
COMP_NAME CHAR(15) NOT NULL,
PURPOSE CHAR(15) NOT NULL,
COST NUMERIC(5) NOT NULL,
L_EVENT_ID NUMERIC(2),
FOREIGN KEY(L_EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
PRIMARY KEY(L_ID,L_EVENT_ID)
);


insert into finance values(1,1,10000);

insert into finance values(1,2,10000);

insert into finance values(1,3,10000);




CREATE 
TRIGGER sponsors_log
AFTER UPDATE 
ON SPONSORS FOR EACH ROW
INSERT into sponsors_log VALUES ('root', CONCAT('Updated Sponsors Record.\nOld Sponsor id: ',
         OLD.S_ID,' \nNew sponsor id :',NEW.S_ID,'\nOld sponsor name: ',
         OLD.S_NAME,'\nNew sponsor name:',NEW.S_NAME,'\nOld sponsor amount:',OLD.AMOUNT,'\nNew sponsor amount:',NEW.AMOUNT),NOW());
END




create table sponsors_log
(
	user varchar(10),
	description varchar(1000),
	time datetime
);

insert into sponsors values(15,'sathya',45000);

update sponsors set amount='raghu' where s_id=10;

update sponsors set s_name=15000 where s_id=10;



DELIMITER //
CREATE PROCEDURE HOME_OUT (OUT t_participants INT,OUT t_events INT,OUT t_volunteers INT,OUT t_budget INT,OUT t_expenditure INT)
	BEGIN
		SELECT COUNT(*) INTO t_participants FROM PARTICIPANTS;
		SELECT COUNT(*) INTO t_events FROM EVENTS;
		SELECT COUNT(*) INTO t_volunteers FROM VOLUNTEERS;
		SELECT SUM(AMOUNT) INTO t_budget FROM SPONSORS; 
		SELECT SUM(COST) INTO t_expenditure FROM LOGISTICS;
	END//
DELIMITER ;

CALL HOME_OUT(@TOTAL_PARTICIPANTS,@TOTAL_EVENTS,@TOTAL_VOLUNTEERS,@TOTAL_BUDGET_FEST,@TOTAL_EXPENDITURE_LOGISTICS);

SELECT @TOTAL_PARTICIPANTS AS NO_OF_PARTICIPANTS,@TOTAL_EVENTS AS NO_OF_EVENTS,@TOTAL_VOLUNTEERS AS NO_OF_VOLUNTEERS,@TOTAL_BUDGET_FEST AS FEST_BUDGET,@TOTAL_EXPENDITURE_LOGISTICS AS LOGISTICS_EXPENDITURE;






CREATE PROCEDURE demoproc AS
SELECT E.EVENT_ID,E.EVENT_NAME,F.BUDGET FROM EVENTS E,FINANCE F
WHERE E.EVENT_ID=F.F_EVENT_ID AND F.BUDGET = MAX(F.BUDGET)
UNION
SELECT E.EVENT_ID,E.EVENT_NAME,F.BUDGET FROM EVENTS E,FINANCE F
WHERE E.EVENT_ID=F.F_EVENT_ID AND F.BUDGET = MIN(F.BUDGET) GO;
/

BEGIN
CALC;
END;
/


DELIMITER // 
CREATE PROCEDURE demo()
BEGIN
SELECT * FROM Events;
END//
